package gen.tech.QA.test.first;

import gen.tech.QA.test.first.pages.MyHomePage;
import gen.tech.QA.test.first.pages.SignupPage;
import gen.tech.QA.test.first.tempmail.TempMail;
import gen.tech.QA.test.first.tempmail.model.Email;
import org.jsoup.Jsoup;
import org.jsoup.select.Elements;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.xml.sax.SAXException;

import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.Random;


/**
 * Created by ashavlovskyi on 7/22/17.
 */
public class RozetkaTests {
    public final String BaseURL = "https://my.rozetka.com.ua/";
    public final String SignupURL = BaseURL+"signup";
    public final String partOfConfirmURL = "confirmEmail";
    public final String emailDomain= "rozetka.com.ua";


    private WebDriver driver;
    @BeforeClass
    public void setUp() {
        System.setProperty("webdriver.chrome.driver", "lib/chromedriver");
        driver = new ChromeDriver();
    }

    @Test
    public void RozetkaSingUpSuccessful() {
//        Получить временную почту, используя документацию к api  - https://temp-mail.ru/api
        String username="";
        String emailaddress = "";
        String password = "1q2w3e4rA"; // also could be generated by this is not important for this test-case
        final String alphabet = "0123456789abcdefg";
        // username and email generation
        int length = 10; // should not be equal to password length
        char[] randomemail = new char[length];
        Random r = new Random();
        for (int i = 0; i < 10; i++) {
            randomemail[i] = alphabet.charAt(r.nextInt(alphabet.length()));
        }

        TempMail tempmail = null;
        List<Email> emails;
        try {
            username = new String(randomemail);
            tempmail  = new TempMail(username);
            emailaddress  = tempmail.getEmailAddress(); //get email address by using fist domain name
            //т.к. письма из розетки из temp-mail api я получал в нечитаемом виде "����������� ���������� ��"
            //и сделать с этим ничего так и не смог. на всякий случай очищаю список всех писем, а вдруг такое имя уже было сгенерировано,
            // затем выполняю регистрацию и читаю первое письмо от розетки
            //пытаюсь в нем найти ссылку на подтверждение
            emails = tempmail.getEmails(tempmail.getMD5Hash(emailaddress));
            for (Email email : emails) {
                tempmail.deleteEmail(tempmail.getMD5Hash(email.getMailID()));
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
//        На сайте розетки заполнить форму регистрации, введя имя, полученную по апи электронную почту и пароль.
        driver.get(SignupURL);
        SignupPage signuppage = new SignupPage(driver);
        MyHomePage homepage = signuppage.loginAs(username,emailaddress,password);

//        Используя temp-mail api, получить контент письма активации (например, по "mail-subject")
// в html-формате (поле "mail_html" в респонсе запроса на получение списка писем),
// достать из него ссылку активации

        String ConfirmUrl="";
        try {
            emails = tempmail.getEmails(tempmail.getMD5Hash(emailaddress));
            for (Email email : emails) {
//                читаю последнее пришедшее (единсвенное) письмо от розетки и
//                пытаюсь в нем найти ссылку на подтверждение
                if (email.getMailFrom().contains(emailDomain)) {
                    // переменная mail_html приходит пустой от temp-mail api для писем от розетки, читаю mail_text
                    Document htmlbody = Jsoup.parse(email.getMailText());
                    Elements allURLs = htmlbody.body().getElementsByTag("a");
                    for (Element tmpurl : allURLs) {
                        String href = tmpurl.attr("href"); // находим ссылку с ключевыми словами
                        if (href.contains(BaseURL) && href.contains(partOfConfirmURL)) {
                            ConfirmUrl = href;
                            break;
                        }
                    }
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

        Assert.assertNotEquals(ConfirmUrl,""); // проверяем что ссылка есть
//        и перейти по ней на сайт.
        driver.get(ConfirmUrl);
//        В личном кабинете сверить адрес электронной почты с указанным при регистрации.
        driver.get(BaseURL);
        Assert.assertEquals(homepage.getEmail(),emailaddress);
    }

    @AfterClass
    public void tearDown() {
        //закрываем броузер
        driver.close();
        driver.quit();
        driver=null;
    }
}
